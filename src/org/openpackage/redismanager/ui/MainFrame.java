/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.openpackage.redismanager.ui;

import java.awt.Component;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import org.openpackage.redismanager.Main;
import org.openpackage.redismanager.RedisConnection;
import org.openpackage.redismanager.RedisDb;
import org.openpackage.redismanager.RedisKeys;

/**
 *
 * @author micfans
 */
public class MainFrame extends javax.swing.JFrame implements Observer {

    private final MainController controller = new MainController();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initTree();
        initIntroduction();
        controller.addObserver(this);
    }

    private void initTree() {
        TreeModel model = controller.loadConnections();
        connectionTree.setModel(model);
        connectionTree.setCellRenderer(new ConnectionTreeCellRender());
    }

    private void initIntroduction() {
        new Thread() {
            @Override
            public void run() {
                try {
                    introTextPane.setEditable(false);
                    introTextPane.setPage("http://go.openpackage.org/rm/index.html");
                } catch (IOException ex) {
                    controller.log("Init introduction url faild.", ex);
                }
            }
        }.start();

    }

    @Override
    public void update(Observable o, Object arg) {
        DataChange dc = (DataChange) arg;
        String t = dc.type;
        if (t != null) {
            switch (t) {
                case DataChange.CONNECTION_CHANGED:
                    controller.updateConnections((DefaultTreeModel) connectionTree.getModel());
                    break;
                case DataChange.LOG_ADDED:
                    String msg = (String) dc.arg;
                    logTextArea.append(msg);
                    break;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBarPanel = new javax.swing.JPanel();
        statusBarPanel = new javax.swing.JPanel();
        statusBarCenterPanel = new javax.swing.JPanel();
        statusBarLeftPanel = new javax.swing.JPanel();
        statusBarRightPanel = new javax.swing.JPanel();
        mainSplitPane = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        connectionTree = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        keySplitPane = new javax.swing.JSplitPane();
        logTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        dataTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        introTextPane = new javax.swing.JTextPane();
        mainMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Redis Manager");
        setPreferredSize(new java.awt.Dimension(1000, 700));

        toolBarPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(toolBarPanel, java.awt.BorderLayout.PAGE_START);

        statusBarPanel.setLayout(new java.awt.BorderLayout());

        statusBarCenterPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        statusBarPanel.add(statusBarCenterPanel, java.awt.BorderLayout.CENTER);

        statusBarLeftPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        statusBarPanel.add(statusBarLeftPanel, java.awt.BorderLayout.WEST);

        statusBarRightPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        statusBarPanel.add(statusBarRightPanel, java.awt.BorderLayout.EAST);

        getContentPane().add(statusBarPanel, java.awt.BorderLayout.PAGE_END);

        mainSplitPane.setBorder(null);
        mainSplitPane.setDividerLocation(350);
        mainSplitPane.setDividerSize(3);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/openpackage/redismanager/ui/assets/do_not_drop.png"))); // NOI18N
        jButton3.setText("Import/Export");
        jPanel7.add(jButton3);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/openpackage/redismanager/ui/assets/add_database.png"))); // NOI18N
        jButton4.setText("Connect to Redis Server");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton4);

        jPanel6.add(jPanel7, java.awt.BorderLayout.NORTH);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        connectionTree.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                connectionTreeComponentAdded(evt);
            }
        });
        connectionTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectionTreeMouseClicked(evt);
            }
        });
        connectionTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                connectionTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(connectionTree);

        jTabbedPane3.addTab("Connection (Double click to open)", jScrollPane2);

        jPanel6.add(jTabbedPane3, java.awt.BorderLayout.CENTER);

        mainSplitPane.setLeftComponent(jPanel6);

        jPanel3.setLayout(new java.awt.BorderLayout());

        keySplitPane.setBorder(null);
        keySplitPane.setDividerLocation(400);
        keySplitPane.setDividerSize(3);
        keySplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane3.setViewportView(logTextArea);

        logTabbedPane.addTab("Logs", jScrollPane3);

        keySplitPane.setRightComponent(logTabbedPane);

        jScrollPane1.setBorder(null);

        introTextPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jScrollPane1.setViewportView(introTextPane);

        dataTabbedPane.addTab("Introduction", jScrollPane1);

        keySplitPane.setLeftComponent(dataTabbedPane);

        jPanel3.add(keySplitPane, java.awt.BorderLayout.CENTER);

        mainSplitPane.setRightComponent(jPanel3);

        getContentPane().add(mainSplitPane, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        mainMenuBar.add(jMenu1);

        setJMenuBar(mainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Main.exit();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        NewConfigDialog newDialog = new NewConfigDialog(this, true, controller);
        newDialog.setLocationRelativeTo(this);
        newDialog.setResizable(false);
        newDialog.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void connectionTreeComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_connectionTreeComponentAdded

    }//GEN-LAST:event_connectionTreeComponentAdded

    private void connectionTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_connectionTreeValueChanged

    }//GEN-LAST:event_connectionTreeValueChanged

    private void connectionTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectionTreeMouseClicked
        TreePath path = connectionTree.getClosestPathForLocation(evt.getX(), evt.getY());
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) (path.getLastPathComponent());
        Object userObject = node.getUserObject();
        if (evt.getClickCount() > 1) {
            if (userObject instanceof RedisConnection && node.isLeaf()) {
                controller.renderDbs(node);
            } else if (userObject instanceof RedisDb && node.isLeaf()) {
                controller.renderKeys(node);
            } else if (userObject instanceof RedisKeys) {
                RedisKeys rks = (RedisKeys) userObject;
                KeysPanel dp = findDataPanel(rks);
                if (dp == null) {
                    dp = new KeysPanel(rks);
                    dataTabbedPane.add(rks.getRd().getFullTitle(), dp);
                }
                dataTabbedPane.setSelectedComponent(dp);
            }
            connectionTree.expandPath(path);
        }
    }//GEN-LAST:event_connectionTreeMouseClicked

    private KeysPanel findDataPanel(RedisKeys rks) {
        Component[] comps = dataTabbedPane.getComponents();
        for (Component comp : comps) {
            if (comp instanceof KeysPanel) {
                KeysPanel dp = (KeysPanel) comp;
                if (dp.getRedisKeys().equals(rks)) {
                    return dp;
                }
            }
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree connectionTree;
    private javax.swing.JTabbedPane dataTabbedPane;
    private javax.swing.JTextPane introTextPane;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JSplitPane keySplitPane;
    private javax.swing.JTabbedPane logTabbedPane;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JPanel statusBarCenterPanel;
    private javax.swing.JPanel statusBarLeftPanel;
    private javax.swing.JPanel statusBarPanel;
    private javax.swing.JPanel statusBarRightPanel;
    private javax.swing.JPanel toolBarPanel;
    // End of variables declaration//GEN-END:variables

}
