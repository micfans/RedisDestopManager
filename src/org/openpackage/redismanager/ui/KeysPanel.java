/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.openpackage.redismanager.ui;

import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.openpackage.redismanager.Main;
import org.openpackage.redismanager.RedisKey;
import org.openpackage.redismanager.RedisKeys;

/**
 *
 * @author micfans
 */
public class KeysPanel extends javax.swing.JPanel implements Observer {

    private static final String KEY_FILTER_EMPTY_TEXT = "Enter char to filter";

    private final DataController controller = new DataController();

    private final RedisKeys rks;

    private RedisKey currentRedisKey;

    private ValuePanel valuePanel;

    /**
     * Creates new form DataPanel
     *
     * @param rks
     */
    public KeysPanel(RedisKeys rks) {
        this.rks = rks;
        initComponents();
        initTree("*");
        this.rks.addObserver(this);
    }

    @Override
    public void update(Observable o, Object arg) {
        keyFilterTextFieldFocusLost(null);
    }

    public RedisKeys getRedisKeys() {
        return rks;
    }

    private void initTree(String filter) {
        DefaultTreeModel model = controller.loadKeys(rks, filter);
        keysTree.setModel(model);
        keysTree.setCellRenderer(new KeysTreeCellRender());
        keysTree.expandRow(0);
        model.reload();
        if (model.isLeaf(model.getRoot())) {
            if (valuePanel != null) {
                cardPanel.remove(valuePanel);
                emptyPanel.setVisible(true);
            }
        } else if (keysTree.getSelectionCount() == 0) {
            currentRedisKey = null;
        }
    }

    public void reloadTree() {
        String t = keyFilterTextField.getText();
        if (t.equals("")) {
            keyFilterTextField.setText(KEY_FILTER_EMPTY_TEXT);
        }
        t = keyFilterTextField.getText();
        if (t.equals(KEY_FILTER_EMPTY_TEXT)) {
            t = "*";
        }
        initTree(t);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        keysTree = new javax.swing.JTree();
        jPanel9 = new javax.swing.JPanel();
        keyFilterTextField = new javax.swing.JTextField();
        cardPanel = new javax.swing.JPanel();
        emptyPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setDividerSize(3);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(null);

        keysTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        keysTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keysTreeMouseClicked(evt);
            }
        });
        keysTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                keysTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(keysTree);

        jPanel8.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.BorderLayout());

        keyFilterTextField.setText(KEY_FILTER_EMPTY_TEXT);
        keyFilterTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                keyFilterTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                keyFilterTextFieldFocusLost(evt);
            }
        });
        keyFilterTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keyFilterTextFieldKeyPressed(evt);
            }
        });
        jPanel9.add(keyFilterTextField, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setLeftComponent(jPanel8);

        cardPanel.setLayout(new java.awt.CardLayout());

        emptyPanel.setBackground(new java.awt.Color(204, 204, 204));
        emptyPanel.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Select key to display.");
        emptyPanel.add(jLabel3, java.awt.BorderLayout.CENTER);

        cardPanel.add(emptyPanel, "card2");

        jSplitPane1.setRightComponent(cardPanel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void keysTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_keysTreeValueChanged
        TreePath path = evt.getPath();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) (path.getLastPathComponent());
        if (!node.isRoot()) {
            if (valuePanel != null) {
                cardPanel.remove(valuePanel);
                valuePanel = null;
            }
            emptyPanel.setVisible(true);
            currentRedisKey = (RedisKey) node.getUserObject();
            switch (currentRedisKey.getType()) {
                case "string":
                    valuePanel = new StringValuePanel(this, currentRedisKey);
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Wait dev.");

            }
            if (valuePanel != null) {
                cardPanel.add(valuePanel);
                emptyPanel.setVisible(false);
                valuePanel.setVisible(true);
                valuePanel.reloadValue();
            }
        }
    }//GEN-LAST:event_keysTreeValueChanged

    private void keyFilterTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_keyFilterTextFieldFocusGained
        if (keyFilterTextField.getText().startsWith(KEY_FILTER_EMPTY_TEXT)) {
            keyFilterTextField.setText("");
        }
    }//GEN-LAST:event_keyFilterTextFieldFocusGained

    private void keyFilterTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_keyFilterTextFieldFocusLost
        reloadTree();
    }//GEN-LAST:event_keyFilterTextFieldFocusLost

    private void keyFilterTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyFilterTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            keysTree.grabFocus();
        }
    }//GEN-LAST:event_keyFilterTextFieldKeyPressed

    private void keysTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keysTreeMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            JPopupMenu pop = new JPopupMenu();
            JMenu menu = new JMenu("Add New key");
            menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/openpackage/redismanager/ui/assets/key_2.png")));
            pop.add(menu);
            JMenuItem m1 = new JMenuItem("String");
            m1.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseReleased(MouseEvent e) {
                    NewStringKeyDialog newKeyDialog = new NewStringKeyDialog(Main.frame, true);
                    newKeyDialog.setLocationRelativeTo(Main.frame);
                    newKeyDialog.setResizable(false);
                    newKeyDialog.setVisible(true);
                }
            });
            JMenuItem m2 = new JMenuItem("List");
            m2.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseReleased(MouseEvent e) {
                    NewListKeyDialog newKeyDialog = new NewListKeyDialog(Main.frame, true);
                    newKeyDialog.setLocationRelativeTo(Main.frame);
                    newKeyDialog.setResizable(false);
                    newKeyDialog.setVisible(true);
                }
            });
            menu.add(m1);
            menu.add(m2);
            pop.show(keysTree, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_keysTreeMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cardPanel;
    private javax.swing.JPanel emptyPanel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField keyFilterTextField;
    private javax.swing.JTree keysTree;
    // End of variables declaration//GEN-END:variables

}
